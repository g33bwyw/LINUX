/****************************nginx安装前准备****************************************/
虚拟机装好先安装环境需要的必须库
yum -y install gcc wget gcc-c++ automake autoconf libtool libxml2-devel libxslt-devel perl-devel perl-ExtUtils-Embed pcre-devel openssl-devel
关闭防火墙
systemctl stop firewalld
关闭selinux
setenforce 0
sed -i 's/=enforcing/=disabled/' /etc/selinux/config


/*********************************nginx安装********************************************/
1.创建nginx进程用户
groupadd www						//创建所属组
useradd www -g www  -s /sbin/nologin	//创建系统用户
2.下载nginx安装包
cd /usr/local/src
wget nginx下载链接
3.解压nginx安装包
tar -zxvf nginx-1.12.2.tar.gz
4.编译安装
./configure --prefix=/usr/local/nginx --user=www --group=www
make && make install
5.启动nginx
/usr/local/nginx/sbin/nginx
注：nginx -h 查看nginx的相关选项

center7底下配置nginx开机启动
vim /etc/init.d/nginx,添加如下内容
#!/bin/sh
#
# nginx - this script starts and stops the nginx daemon
#
# chkconfig:   - 85 15
# description:  NGINX is an HTTP(S) server, HTTP(S) reverse \
#               proxy and IMAP/POP3 proxy server
# processname: nginx
# config:      /etc/nginx/nginx.conf
# config:      /etc/sysconfig/nginx
# pidfile:     /var/run/nginx.pid

# Source function library.
. /etc/rc.d/init.d/functions

# Source networking configuration.
. /etc/sysconfig/network

# Check that networking is up.
[ "$NETWORKING" = "no" ] && exit 0

nginx="/usr/local/nginx/sbin/nginx"
prog=$(basename $nginx)

NGINX_CONF_FILE="/usr/local/nginx/conf/nginx.conf"

[ -f /etc/sysconfig/nginx ] && . /etc/sysconfig/nginx

lockfile=/var/lock/subsys/nginx

make_dirs() {
   # make required directories
   user=`$nginx -V 2>&1 | grep "configure arguments:" | sed 's/[^*]*--user=\([^ ]*\).*/\1/g' -`
   if [ -z "`grep $user /etc/passwd`" ]; then
	   useradd -M -s /bin/nologin $user
   fi
   options=`$nginx -V 2>&1 | grep 'configure arguments:'`
   for opt in $options; do
	   if [ `echo $opt | grep '.*-temp-path'` ]; then
		   value=`echo $opt | cut -d "=" -f 2`
		   if [ ! -d "$value" ]; then
			   # echo "creating" $value
			   mkdir -p $value && chown -R $user $value
		   fi
	   fi
   done
}

start() {
	[ -x $nginx ] || exit 5
	[ -f $NGINX_CONF_FILE ] || exit 6
	make_dirs
	echo -n $"Starting $prog: "
	daemon $nginx -c $NGINX_CONF_FILE
	retval=$?
	echo
	[ $retval -eq 0 ] && touch $lockfile
	return $retval
}

stop() {
	echo -n $"Stopping $prog: "
	killproc $prog -QUIT
	retval=$?
	echo
	[ $retval -eq 0 ] && rm -f $lockfile
	return $retval
}

restart() {
	configtest || return $?
	stop
	sleep 1
	start
}

reload() {
	configtest || return $?
	echo -n $"Reloading $prog: "
	killproc $nginx -HUP
	RETVAL=$?
	echo
}

force_reload() {
	restart
}

configtest() {
  $nginx -t -c $NGINX_CONF_FILE
}

rh_status() {
	status $prog
}

rh_status_q() {
	rh_status >/dev/null 2>&1
}

case "$1" in
	start)
		rh_status_q && exit 0
		$1
		;;
	stop)
		rh_status_q || exit 0
		$1
		;;
	restart|configtest)
		$1
		;;
	reload)
		rh_status_q || exit 7
		$1
		;;
	force-reload)
		force_reload
		;;
	status)
		rh_status
		;;
	condrestart|try-restart)
		rh_status_q || exit 0
			;;
	*)
		echo $"Usage: $0 {start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest}"
		exit 2
esac

备注：以上开机脚本如下二个地方分别修改为nginx安装对应的地方
		nginx="/usr/local/nginx/sbin/nginx"
		NGINX_CONF_FILE="/usr/local/nginx/conf/nginx.conf"
		
chmod +x nginx				//添加执行权限
//chkconfig --add nginx		//添加到开机启动选项中
//chkconfig nginx on			//启用开机启动
//chkconfig --list nginx		//查看nginx开机启动状况

systemctl enable nginx		//添加   chkconfig nginx on（
systemctl disable nginx		//去除   chkconfig nginx off
systemctl is-enabled nginx	//检查是否设置为启动   chkconfig foo
systemctl list-unit-files --type=service//查看各个级别下服务的启动与禁用情况 chkconfig --list


将nginx加入系统服务中
vim /usr/lib/systemd/system/nginx.service
添加如下内容
[Unit]
Description=nginx - high performance web server
Documentation=http://nginx.org/en/docs/
After=network-online.target remote-fs.target nss-lookup.target
Wants=network-online.target

[Service]
Type=forking
ExecStartPre=/usr/local/nginx/sbin/nginx -t -c /usr/local/nginx/conf/nginx.conf
ExecStart=/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf
ExecReload=/bin/kill -s HUP $MAINPID
ExecStop=/bin/kill -s QUIT $MAINPID

[Install]
WantedBy=multi-user.target

/*************************************nginx信号源*********************************************/
TERM, INT	===========================>	快速关闭
QUIT		===========================>	等待结束再关闭
HUP			===========================>	重新读取配置文件
USR1		===========================>	重读日志，可以使用脚本对每天的日志进行切割，可以以年/月/日
USR2		===========================>	平滑的升级
WINCH		===========================>	优雅关闭旧的进程(配合USR2来进行升级)

/**********************************nginx访问日志进行每天定时备份shell脚本******************************************************/
#!/bin/bash
yesterday=`date -d yesterday +%Y%m%d`;
filename_error='/usr/local/nginx/logs/'$yesterday'.error.log';
filename_access='/usr/local/nginx/logs/'$yesterday'.access.log';
#echo $filename;
if [ -f $filename_error -a -f $filename_access ];
then
echo '文件已经存在';
else
  mv /usr/local/nginx/logs/error.log $filename_error;
  mv /usr/local/nginx/logs/access.log $filename_access;
  kill -USR1 `cat /usr/local/nginx/logs/nginx.pid`;
  echo ok;
fi

/******************************************nginx中的location匹配相关说明****************************************************************************/
location的类型大概分为三类：
	location = patt {} [精准匹配]
	location patt{}  [一般匹配]
	location ~ patt{} [正则匹配]
客户端访问服务器，请求地址进行匹配，如果碰到精准匹配优先取精准匹配，如果没有再次去找一般匹配，如果发现有多个一般匹配先去找最长的一般匹配，暂时存储起来，于是
接着去寻找正则匹配找到则停止匹配，否则继续查找，如果未找到合适的正则匹配之前有存储的一般匹配则返回一般匹配的结果‘

/******************************************nginx rewrite重写相关说明***************************************************/
if (条件) {
	set 设置变量
	break 跳出rewrite
	return 返回状态码
	rewrite重写
}
rewrite    <regex>    <replacement>    [flag];
关键字      正则        替代内容       flag标记

正则：perl兼容正则表达式语句进行规则匹配
替代内容：将正则匹配的内容替换成replacement
flag标记：rewrite支持的flag标记

last  #本条规则匹配完成后，继续向下匹配新的location URI规则
break  #本条规则匹配完成即终止，不再匹配后面的任何规则
redirect  #返回302临时重定向，浏览器地址会显示跳转后的URL地址
permanent  #返回301永久重定向，浏览器地址栏会显示跳转后的URL地址


/***********************************nginx启用gzip压缩****************************************************/
gzip配置的常用参数
gzip on|off;  #是否开启gzip
gzip_buffers 32 4K| 16 8K #缓冲(压缩在内存中缓冲几块? 每块多大?)
gzip_comp_level [1-9] #推荐6 压缩级别(级别越高,压的越小,越浪费CPU计算资源)
gzip_disable #正则匹配UA 什么样的Uri不进行gzip
gzip_min_length 200 # 开始压缩的最小长度(再小就不要压缩了,意义不在)
gzip_http_version 1.0|1.1 # 开始压缩的http协议版本(可以不设置,目前几乎全是1.1协议)
gzip_proxied          # 设置请求者代理服务器,该如何缓存内容
gzip_types text/plain  application/xml # 对哪些类型的文件用压缩 如txt,xml,html ,css
gzip_vary on|off  # 是否传输gzip压缩标志

例如：
gzip on;
gzip_buffers 32 4K;
gzip_types text/plain  text/css text/xml application/javascript image/gif image/jpeg image/png;
gzip_vary on;

/****************************静态文件客户端缓存设置***********************************************/
原理是: 服务器响应文件内容是,同时响应etag标签(内容的签名,内容一变,他也变), 和 last_modified_since 2个标签值
浏览器下次去请求时,头信息发送这两个标签, 服务器检测文件有没有发生变化,如无,直接头信息返回 etag,last_modified_since
浏览器知道内容无改变,于是直接调用本地缓存.
这个过程,也请求了服务器,但是传着的内容极少.
location ~* ^.+\.(js|ico|gif|jpg|jpeg|png|html|htm)$ {
	expires 24h;
}

/**************************************nginx反向代理*********************************************************/
如图片反向代理到其他服务器
location ~ \.(jpg|jpeg|png|gif)$ {
	proxy_pass http://192.168.1.204:8080;
	expires 1d;
}

/***************************************nginx实现负载均衡********************************/
upstream tomcatserver1 {  
	server 192.168.72.49:8080 weight=3;  
	server 192.168.72.49:8081;  
}   
  
server {  
	listen       80;  
	server_name  8080.max.com;  
	#charset koi8-r;  
	#access_log  logs/host.access.log  main;  
	location / {  
		proxy_pass   http://tomcatserver1;  
		index  index.html index.htm;  
	}  
}  

/*****************************nginx安装第三方模块****************************************/
./configure --prefix=/xxx/xxx --add_module=/path/ngx_module




