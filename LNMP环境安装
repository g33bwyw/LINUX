基于centos7的安装
Nginx 版本：1.13.6
一.NGINX编译安装
1.关闭selinux
    sed -i 's/SELINUX=.*/SELINUX=disabled/g' /etc/selinux/config
    setenforce 0
2.添加Nginx组和Nginx用户,Nginx设置为系统用户
    groupadd -r nginx
    useradd -r -g nginx nginx
3.安装开发工具组包
    yum groupinstall "Development tools"
4.安装基本扩展包
    yum -y install gcc wget gcc-c++ automake autoconf libtool libxml2-devel libxslt-devel perl-devel perl-ExtUtils-Embed pcre-devel openssl-devel
5.解压nginx压缩包，并且进行编译安装
    tar -zxvf nginx-1.13.6.tar.gz -C /usr/local/src         //解压

    /*********************编译***************************************/
    ./configure \
    --prefix=/usr/local/nginx \
    --sbin-path=/usr/local/nginx/sbin/nginx \
    --conf-path=/usr/local/nginx/conf/nginx.conf \
    --error-log-path=/usr/local/nginx/log/error.log \
    --http-log-path=/usr/local/nginx/log/access.log \
    --pid-path=/usr/local/nginx/run/nginx.pid \
    --lock-path=/usr/local/nginx/run/nginx.lock \
    --http-client-body-temp-path=/usr/local/nginx/client \
    --http-proxy-temp-path=/usr/local/nginx/proxy \
    --http-fastcgi-temp-path=/usr/local/nginx/fcgi \
    --http-uwsgi-temp-path=/usr/local/nginx/uwsgi \
    --http-scgi-temp-path=/usr/local/nginx/scgi \
    --user=nginx \
    --group=nginx \
    --with-pcre \
    --with-http_v2_module \
    --with-http_ssl_module \
    --with-http_realip_module \
    --with-http_addition_module \
    --with-http_sub_module \
    --with-http_dav_module \
    --with-http_flv_module \
    --with-http_mp4_module \
    --with-http_gunzip_module \
    --with-http_gzip_static_module \
    --with-http_random_index_module \
    --with-http_secure_link_module \
    --with-http_stub_status_module \
    --with-http_auth_request_module \
    --with-mail \
    --with-mail_ssl_module \
    --with-file-aio \
    --with-http_v2_module \
    --with-threads \
    --with-stream \
    --with-stream_ssl_module
    /************************************************************/
    make && make install
6.启动脚本配置
    1.vim /usr/lib/systemd/system/nginx.service
    2.[Unit]
     Description=nginx - high performance web server
     Documentation=http://nginx.org/en/docs/
     After=network-online.target remote-fs.target nss-lookup.target
     Wants=network-online.target

     [Service]
     Type=forking
     ExecStartPre=/usr/local/nginx/sbin/nginx -t -c /usr/local/nginx/conf/nginx.conf
     ExecStart=/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf
     ExecReload=/bin/kill -s HUP $MAINPID
     ExecStop=/bin/kill -s QUIT $MAINPID

     [Install]
     WantedBy=multi-user.target

7.nginx 开启自动启动
    a.vim /etc/init.d/nginx 添加如下内容：
        #!/bin/sh
        #
        # nginx - this script starts and stops the nginx daemon
        #
        # chkconfig:   - 85 15
        # description:  NGINX is an HTTP(S) server, HTTP(S) reverse \
        #               proxy and IMAP/POP3 proxy server
        # processname: nginx
        # config:      /etc/nginx/nginx.conf
        # config:      /etc/sysconfig/nginx
        # pidfile:     /var/run/nginx.pid

        # Source function library.
        . /etc/rc.d/init.d/functions

        # Source networking configuration.
        . /etc/sysconfig/network

        # Check that networking is up.
        [ "$NETWORKING" = "no" ] && exit 0

        nginx="/usr/local/nginx/sbin/nginx"
        prog=$(basename $nginx)

        NGINX_CONF_FILE="/usr/local/nginx/conf/nginx.conf"

        [ -f /etc/sysconfig/nginx ] && . /etc/sysconfig/nginx

        lockfile=/var/lock/subsys/nginx

        make_dirs() {
           # make required directories
           user=`$nginx -V 2>&1 | grep "configure arguments:" | sed 's/[^*]*--user=\([^ ]*\).*/\1/g' -`
           if [ -z "`grep $user /etc/passwd`" ]; then
               useradd -M -s /bin/nologin $user
           fi
           options=`$nginx -V 2>&1 | grep 'configure arguments:'`
           for opt in $options; do
               if [ `echo $opt | grep '.*-temp-path'` ]; then
                   value=`echo $opt | cut -d "=" -f 2`
                   if [ ! -d "$value" ]; then
                       # echo "creating" $value
                       mkdir -p $value && chown -R $user $value
                   fi
               fi
           done
        }

        start() {
            [ -x $nginx ] || exit 5
            [ -f $NGINX_CONF_FILE ] || exit 6
            make_dirs
            echo -n $"Starting $prog: "
            daemon $nginx -c $NGINX_CONF_FILE
            retval=$?
            echo
            [ $retval -eq 0 ] && touch $lockfile
            return $retval
        }

        stop() {
            echo -n $"Stopping $prog: "
            killproc $prog -QUIT
            retval=$?
            echo
            [ $retval -eq 0 ] && rm -f $lockfile
            return $retval
        }

        restart() {
            configtest || return $?
            stop
            sleep 1
            start
        }

        reload() {
            configtest || return $?
            echo -n $"Reloading $prog: "
            killproc $nginx -HUP
            RETVAL=$?
            echo
        }

        force_reload() {
            restart
        }

        configtest() {
          $nginx -t -c $NGINX_CONF_FILE
        }

        rh_status() {
            status $prog
        }

        rh_status_q() {
            rh_status >/dev/null 2>&1
        }

        case "$1" in
            start)
                rh_status_q && exit 0
                $1
                ;;
            stop)
                rh_status_q || exit 0
                $1
                ;;
            restart|configtest)
                $1
                ;;
            reload)
                rh_status_q || exit 7
                $1
                ;;
            force-reload)
                force_reload
                ;;
            status)
                rh_status
                ;;
            condrestart|try-restart)
                rh_status_q || exit 0
                    ;;
            *)
                echo $"Usage: $0 {start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest}"
                exit 2
        esac
        备注：如下二个地方分别修改为nginx安装对应的地方
            nginx="/usr/local/nginx/sbin/nginx"
            NGINX_CONF_FILE="/usr/local/nginx/conf/nginx.conf"
    b.chmod +x nginx
    c.
        chkconfig --add mysqld
        chkconfig --list mysqld
        chkconfig mysqld on





Mysql安装
mysql版本5.7.20已经编译好的安装包
1.准备编译环境
    yum groupinstall -y "Server Platform Development"  "Development tools"[如果已经安装可以省略]
    yum install -y cmake
2.解压文件到/usr/local同时重新命名
    tar -zxvf mysql-5.7.20-linux-glibc2.12-x86_64.tar.gz -C /usr/local/
    mv mysql-5.7.20-linux-glibc2.12-x86_64/ mysql
3.创建数据目录
    cd /usr/local/mysql
    mkdir data
4.创建mysql组以及用户
    groupadd -r mysql
    useradd -r mysql -g mysql -s /sbin/nologin -d /usr/local/mysql/
5.改变mysql的权限
    chown -R mysql. mysql
6.初始化数据库
    5.7.18前的版本用如下方式：
        /usr/local/mysql/bin/mysql_install_db --user=mysql --basedir=/usr/local/mysql/ --datadir=/usr/local/mysql/data/
    5.8.18后的版本用如下方式
        /usr/local/mysql/bin/mysqld --initialize-insecure --user=mysql --basedir=/usr/local/mysql/ --datadir=/usr/local/mysql/data/
7.添加mysql启动脚本
    cd /usr/local/mysql/support-files/
    cp mysql.server  /etc/init.d/mysqld
    chmod +x /etc/init.d/mysqld
    vim /etc/rc.d/rc.local 添加内容如下并且保存：/etc/init.d/mysqld start到rc.local
8.设置环境变量
    vi /root/.bash_profile 内容修改如：PATH=$PATH:$HOME/bin:/usr/local/mysql/bin:/usr/local/mysql/lib
    source /root/.bash_profile
9.启动数据库：
    /etc/init.d/mysqld start
    /etc/init.d/mysqld stop

10.开机自启动
    chkconfig --add mysqld
    chkconfig --list mysqld
    chkconfig mysqld on
备注：数据库配置文件修改/etc/my.cnf
[mysqld]
basedir=/usr/local/mysql
datadir=/usr/local/mysql/data
socket=/tmp/mysql.sock
user=mysql
port=3306


PHP安装
PHP5.6.32版本
1.安装基本扩展
    yum install libmcrypt libmcrypt-devel mhash mhash-devel libxml2 libxml2-devel bzip2 bzip2-devel php-gd
2.解压PHP包
    tar -zxvf php-5.6.32.tar.gz  -C /usr/local/src
3.编译PHP包
    ./configure --prefix=/usr/local/php \
    --with-config-file-scan-dir=/etc/php.d \
    --with-config-file-path=/etc \
    --with-mysql=/usr/local/mysql \
    --with-mysqli=/usr/local/mysql/bin/mysql_config \
    --enable-mbstring \
    --with-freetype-dir \
    --with-jpeg-dir \
    --with-png-dir \
    --with-zlib \
    --with-libxml-dir=/usr \
    --with-openssl \
    -enable-xml \
    --enable-sockets \
    --enable-fpm \
    --with-mcrypt \
    --with-bz2 \
    make && make install
如果出现如下错误：
    configure: error: mcrypt.h not found. Please reinstall libmcrypt.
解决方案：
    yum install -y epel-release
    yum install -y libmcrypt-devel
    两个不能一起安装,因为CentOs6或7默认的yum源没有 libmcrypt-devel这个包,只能借助epel的yum源,所以先安装epel,再安装
    libmcrypt

小知识点：
    EPEL的全称叫 Extra Packages for Enterprise Linux 。EPEL是由 Fedora 社区打造，为 RHEL 及衍生发行版如 CentOS、Scientific Linux 等提供高质量软件包的项目。装上了 EPEL之后，就相当于添加了一个第三方源

4.添加php和php-fpm配置文件。
    cp /usr/local/src/php-5.6.32/php.ini-production /etc/php.ini //配置php.ini
    //配置php.conf
    cd /usr/local/php/etc/
    cp php-fpm.conf.default php-fpm.conf
    //;pid=run/php-fpm.pid 修改为pid = /usr/local/php/var/run/php-fpm.pid 加载php-fpm进程文件
    sed -i 's@;pid = run/php-fpm.pid@pid = /usr/local/php/var/run/php-fpm.pid@' php-fpm.conf

5.添加启动脚本
    cp /usr/local/src/php-5.6.32/sapi/fpm/init.d.php-fpm /etc/init.d/php-fpm
    chmod +x /etc/init.d/php-fpm

6.添加php-fpm至服务列表并设置开机自启
    chkconfig --add php-fpm
    chkconfig --list php-fpm
    chkconfig php-fpm on

7.添加nginx对fastcgi的支持，首先备份默认的配置文件。
    cp /usr/local/nginx/nginx.conf /usr/local/nginx/nginx.confbak
    cp /usr/local/nginx/nginx.conf.default /usr/local/nginx/nginx.conf
8.修改nginx配置
    #添加了index.php
    location / {
        root   html;
        index  index.html index.htm index.php;
    }

    #/scripts修改为/usr/local/nginx/html网站根目录
    location ~ \.php$ {
        root           html;
        fastcgi_pass   127.0.0.1:9000;
        fastcgi_index  index.php;
        fastcgi_param  SCRIPT_FILENAME  /usr/local/nginx/html$fastcgi_script_name;
        include        fastcgi_params;
    }

备注：nginx配置只是暂时修改成这样，web服务器有多个项目，nginx配置需要重新配置，见nginx配置





