/****************************nginx安装前准备****************************************/
虚拟机装好先安装环境需要的必须库
yum -y install gcc wget gcc-c++ automake autoconf libtool libxml2-devel libxslt-devel perl-devel perl-ExtUtils-Embed pcre-devel openssl-devel
关闭防火墙
systemctl stop firewalld
关闭selinux
setenforce 0
sed -i 's/=enforcing/=disabled/' /etc/selinux/config


/*********************************nginx安装********************************************/
1.创建nginx进程用户
groupadd www						//创建所属组
useradd www -g www  -s /sbin/nologin	//创建系统用户
2.下载nginx安装包
cd /usr/local/src
wget nginx下载链接
3.解压nginx安装包
tar -zxvf nginx-1.12.2.tar.gz
4.编译安装
./configure --prefix=/usr/local/nginx --user=www --group=www
make && make install
5.启动nginx
/usr/local/nginx/sbin/nginx
注：nginx -h 查看nginx的相关选项

center7底下配置nginx开机启动
vim /etc/init.d/nginx,添加如下内容
#!/bin/sh
#
# nginx - this script starts and stops the nginx daemon
#
# chkconfig:   - 85 15
# description:  NGINX is an HTTP(S) server, HTTP(S) reverse \
#               proxy and IMAP/POP3 proxy server
# processname: nginx
# config:      /etc/nginx/nginx.conf
# config:      /etc/sysconfig/nginx
# pidfile:     /var/run/nginx.pid

# Source function library.
. /etc/rc.d/init.d/functions

# Source networking configuration.
. /etc/sysconfig/network

# Check that networking is up.
[ "$NETWORKING" = "no" ] && exit 0

nginx="/usr/local/nginx/sbin/nginx"
prog=$(basename $nginx)

NGINX_CONF_FILE="/usr/local/nginx/conf/nginx.conf"

[ -f /etc/sysconfig/nginx ] && . /etc/sysconfig/nginx

lockfile=/var/lock/subsys/nginx

make_dirs() {
   # make required directories
   user=`$nginx -V 2>&1 | grep "configure arguments:" | sed 's/[^*]*--user=\([^ ]*\).*/\1/g' -`
   if [ -z "`grep $user /etc/passwd`" ]; then
	   useradd -M -s /bin/nologin $user
   fi
   options=`$nginx -V 2>&1 | grep 'configure arguments:'`
   for opt in $options; do
	   if [ `echo $opt | grep '.*-temp-path'` ]; then
		   value=`echo $opt | cut -d "=" -f 2`
		   if [ ! -d "$value" ]; then
			   # echo "creating" $value
			   mkdir -p $value && chown -R $user $value
		   fi
	   fi
   done
}

start() {
	[ -x $nginx ] || exit 5
	[ -f $NGINX_CONF_FILE ] || exit 6
	make_dirs
	echo -n $"Starting $prog: "
	daemon $nginx -c $NGINX_CONF_FILE
	retval=$?
	echo
	[ $retval -eq 0 ] && touch $lockfile
	return $retval
}

stop() {
	echo -n $"Stopping $prog: "
	killproc $prog -QUIT
	retval=$?
	echo
	[ $retval -eq 0 ] && rm -f $lockfile
	return $retval
}

restart() {
	configtest || return $?
	stop
	sleep 1
	start
}

reload() {
	configtest || return $?
	echo -n $"Reloading $prog: "
	killproc $nginx -HUP
	RETVAL=$?
	echo
}

force_reload() {
	restart
}

configtest() {
  $nginx -t -c $NGINX_CONF_FILE
}

rh_status() {
	status $prog
}

rh_status_q() {
	rh_status >/dev/null 2>&1
}

case "$1" in
	start)
		rh_status_q && exit 0
		$1
		;;
	stop)
		rh_status_q || exit 0
		$1
		;;
	restart|configtest)
		$1
		;;
	reload)
		rh_status_q || exit 7
		$1
		;;
	force-reload)
		force_reload
		;;
	status)
		rh_status
		;;
	condrestart|try-restart)
		rh_status_q || exit 0
			;;
	*)
		echo $"Usage: $0 {start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest}"
		exit 2
esac

备注：以上开机脚本如下二个地方分别修改为nginx安装对应的地方
		nginx="/usr/local/nginx/sbin/nginx"
		NGINX_CONF_FILE="/usr/local/nginx/conf/nginx.conf"
		
chmod +x nginx				//添加执行权限
//chkconfig --add nginx		//添加到开机启动选项中
//chkconfig nginx on			//启用开机启动
//chkconfig --list nginx		//查看nginx开机启动状况

systemctl enable nginx		//添加   chkconfig nginx on（
systemctl disable nginx		//去除   chkconfig nginx off
systemctl is-enabled nginx	//检查是否设置为启动   chkconfig foo
systemctl list-unit-files --type=service//查看各个级别下服务的启动与禁用情况 chkconfig --list


将nginx加入系统服务中
vim /usr/lib/systemd/system/nginx.service
添加如下内容
[Unit]
Description=nginx - high performance web server
Documentation=http://nginx.org/en/docs/
After=network-online.target remote-fs.target nss-lookup.target
Wants=network-online.target

[Service]
Type=forking
ExecStartPre=/usr/local/nginx/sbin/nginx -t -c /usr/local/nginx/conf/nginx.conf
ExecStart=/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf
ExecReload=/bin/kill -s HUP $MAINPID
ExecStop=/bin/kill -s QUIT $MAINPID

[Install]
WantedBy=multi-user.target

/*************************************nginx信号源*********************************************/
TERM, INT	===========================>	快速关闭
QUIT		===========================>	等待结束再关闭
HUP			===========================>	重新读取配置文件
USR1		===========================>	重读日志，可以使用脚本对每天的日志进行切割，可以以年/月/日
USR2		===========================>	平滑的升级
WINCH		===========================>	优雅关闭旧的进程(配合USR2来进行升级)

